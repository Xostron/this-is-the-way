#!/usr/bin/env node
/**
 * Module dependencies.
 */
const path = require("path")
require("module-alias/register")
require("dotenv").config({ path: path.join(__dirname, "..", "..", ".env") })
const mongojs = require("mongojs")
var App = require("../app")
var debug = require("debug")("ultramar-api:server")
var http = require("http")
const checkDB = require('@tool/check_db')

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || "3000")

const db = mongojs(process.env.BD_URI)
// Проверка БД
checkDB(db)
db.on("error", (err) => console.log("Отсутствует связь с MongoDB"))
db.on("connect", () => console.log("Связь с MongoDB установлена"))

const app = App(db)
app.set("port", port)

/**
 * Create HTTP server.
 */

var server = http.createServer(app)

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port)
server.on("error", onError)
server.on("listening", onListening)

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
	var port = parseInt(val, 10)

	if (isNaN(port)) {
		// named pipe
		return val
	}

	if (port >= 0) {
		// port number
		return port
	}

	return false
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
	if (error.syscall !== "listen") {
		throw error
	}

	var bind = typeof port === "string" ? "Pipe " + port : "Port " + port

	// handle specific listen errors with friendly messages
	switch (error.code) {
		case "EACCES":
			console.error(bind + " requires elevated privileges")
			process.exit(1)
			break
		case "EADDRINUSE":
			console.error(bind + " is already in use")
			process.exit(1)
			break
		default:
			throw error
	}
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
	var addr = server.address()
	var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port
	debug("Listening on " + bind)
}

/**
 * Graceful Shutdown
 */
process.on("SIGINT", function () {
	console.log("Graceful Shutdown")
	process.exit(0)
})
