#!/usr/bin/env node

/**
 * Module dependencies.
 */
require('module-alias/register')
const path = require('path')
const debug = require('debug')('back-n1:server')
const { server, io } = require('@tool/server')
const onConnection = require('@root/socket/on')
require('dotenv').config({ path: path.join(__dirname, '..', '..', '.env') })

/**
 * Listen on provided port, on all network interfaces.
 */

var port = normalizePort(process.env.PORT || '5100')
server.listen(port)
server.on('error', onError)
server.on('listening', onListening)

/**
 * Listen websocket
 */
io.on('connection', (socket) => {
	onConnection(io, socket)
})

/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
	var port = parseInt(val, 10)

	if (isNaN(port)) {
		// named pipe
		return val
	}

	if (port >= 0) {
		// port number
		return port
	}

	return false
}

/**
 * Event listener for HTTP server "error" event.
 */
function onError(error) {
	if (error.syscall !== 'listen') {
		throw error
	}

	var bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port

	// handle specific listen errors with friendly messages
	switch (error.code) {
		case 'EACCES':
			console.error(bind + ' requires elevated privileges')
			process.exit(1)
			break
		case 'EADDRINUSE':
			console.error(bind + ' is already in use')
			process.exit(1)
			break
		default:
			throw error
	}
}

/**
 * Event listener for HTTP server "listening" event.
 */
function onListening() {
	var addr = server.address()
	var bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port
	debug('Listening on ' + bind)
}

const a = new Array(10000000).fill(0)
const b = []
const c = []
console.time('1')
console.log(1, b, new Date())
setTimeout(() => console.log(22, new Date()), 300)
setTimeout(() => console.log(23, new Date()), 100)
setTimeout(() => {
	console.time('2')
	a.forEach((el, i) => {
		let r = el + i
		r = r + 'asjdjja;ksda;lsd;lasd'
		c.push(r)
	})
	console.log(21, new Date(), b[0], b[b.length - 1])
	console.timeEnd('2')
}, 200)
a.forEach((el, i) => {
	let r = el + i
	r = r + 'asjdjja;ksda;lsd;lasd'
	b.push(r)
})
console.log(2, new Date(), b[0], b[b.length - 1])

console.timeEnd('1')
