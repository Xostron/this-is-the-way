#!/usr/bin/env node

/**
 * Module dependencies.
 */
require('module-alias/register')
const path = require('path')
require('dotenv').config({ path: path.join(__dirname, '..', '..', '.env') })
var app = require('../app')
var debug = require('debug')('back-n3:server')
var http = require('http')
const { db } = require('../tool/db/config')

if (process.env.NODE_ENV === 'development') {
	console.log('Подключение .env ', path.join(__dirname, '../../.env'))
	console.log('NODE_ENV ', process.env?.NODE_ENV)
}

/**
 * Get port from environment and store in Express.
 */
var port = normalizePort(process.env.PORT || '5103')
app.set('port', port)

try {
	db.authenticate()
	console.log('Связь с PostgreSQL установлена')
} catch (error) {
	console.error('Отсутствует связь с PostgreSQL', error)
}

/**
 * Create HTTP server.
 */
var server = http.createServer(app)

/**
 * Listen on provided port, on all network interfaces.
 */
server.listen(port)
server.on('error', onError)
server.on('listening', onListening)


/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
	var port = parseInt(val, 10)

	if (isNaN(port)) {
		// named pipe
		return val
	}

	if (port >= 0) {
		// port number
		return port
	}

	return false
}

/**
 * Event listener for HTTP server "error" event.
 */
function onError(error) {
	if (error.syscall !== 'listen') {
		throw error
	}

	var bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port

	// handle specific listen errors with friendly messages
	switch (error.code) {
		case 'EACCES':
			console.error(bind + ' requires elevated privileges')
			process.exit(1)
			break
		case 'EADDRINUSE':
			console.error(bind + ' is already in use')
			process.exit(1)
			break
		default:
			throw error
	}
}

/**
 * Event listener for HTTP server "listening" event.
 */
function onListening() {
	var addr = server.address()
	var bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port
	debug('Listening on ' + bind)
}

/**
 * Graceful Shutdown
 */
process.on('SIGINT', async () => {
	db.close()
	console.log('Graceful Shutdown')
	//exit with a 'success' code 0
	process.exit(0)
})